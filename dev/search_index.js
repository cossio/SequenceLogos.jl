var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SequenceLogos]","category":"page"},{"location":"reference/#SequenceLogos.conservation_matrix-Tuple{AbstractMatrix, AbstractMatrix}","page":"Reference","title":"SequenceLogos.conservation_matrix","text":"conservation_matrix(P, M; unit = log(2))\n\nSimilar to conservation_matrix(P), but instead of a flat measure over letters at each site, computes a KL divergence to a prior measure M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.conservation_matrix-Tuple{AbstractMatrix}","page":"Reference","title":"SequenceLogos.conservation_matrix","text":"conservation_matrix(P; unit = log(2))\n\nGiven a matrix of frequencies P of size (q, L), where q is the number of possible letters and L the sequence length, returns the matrix of conservations (as defined by Schneider and Stephens 1990, 10.1093/nar/18.20.6097).\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.conservation_scores-Tuple{AbstractMatrix, AbstractMatrix}","page":"Reference","title":"SequenceLogos.conservation_scores","text":"conservation_scores(P, M; unit = log(2))\n\nSimilar to conservation_scores(P), but instead of a flat measure over letters at each site, computes a KL divergence to a prior measure M.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.conservation_scores-Tuple{AbstractMatrix}","page":"Reference","title":"SequenceLogos.conservation_scores","text":"conservation_scores(P; unit = log(2))\n\nConservation scores at each site. The default unit = log(2) gives results in bits.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.letter_at-Tuple{Char, String, Any, Real}","page":"Reference","title":"SequenceLogos.letter_at","text":"letter_at(letter, color, (x, y), yscale)\n\nAdds a letter to the current plot, at the given position.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.logo_from_matrix-Tuple{AbstractArray, String}","page":"Reference","title":"SequenceLogos.logo_from_matrix","text":"logo_from_matrix(weights, alphabet)\n\nConstruct a SequenceLogo from a weight matrix of size (q, L), where q is the number of possible letters and L the length of the sequence. alphabet is a String containing the q possible letters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.plot_sequence_logo-Tuple{SequenceLogos.SequenceLogo, Any}","page":"Reference","title":"SequenceLogos.plot_sequence_logo","text":"plot_sequence_logo(sequence_logo, color_fun; thresh=0)\n\nPlots a sequence logo. Ignores letters with weights smaller than thresh.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.remove_duplicate_letters-Tuple{SequenceLogos.SequenceLogo}","page":"Reference","title":"SequenceLogos.remove_duplicate_letters","text":"remove_duplicate_letters(logo)\n\nRemoves duplicate letters at each site (summing their weights).\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.sort_letters-Tuple{SequenceLogos.SequenceLogoSite}","page":"Reference","title":"SequenceLogos.sort_letters","text":"sort_letters(site)\n\nSorts the letters in a site in order of increasing absolute weight.\n\n\n\n\n\n","category":"method"},{"location":"reference/#SequenceLogos.sort_letters-Tuple{SequenceLogos.SequenceLogo}","page":"Reference","title":"SequenceLogos.sort_letters","text":"sort_letters(logo; remove_duplicates=true)\n\nSorts the letters in all sites in order of increasing absolute weight.\n\n\n\n\n\n","category":"method"},{"location":"#SequenceLogos.jl-Documentation","page":"Home","title":"SequenceLogos.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package to plot sequence logos. The package is registered. Install it with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"SequenceLogos\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"The source code is hosted on Github: https://github.com/cossio/SequenceLogos.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Most of the functions have a helpful docstring. See Reference section. See also the Examples listed on the menu on the left side bar.","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"EditURL = \"https://github.com/cossio/SequenceLogos.jl/blob/master/docs/src/literate/rfam.jl\"","category":"page"},{"location":"literate/rfam/#SequenceLogos-examples-with-RFAM","page":"RFAM","title":"SequenceLogos examples with RFAM","text":"","category":"section"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"import GitHub\nimport PyPlot\nimport SequenceLogos\nusing Downloads: download\nusing Statistics: mean\nusing LogExpFunctions: xlogx","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"Fetch RNA family alignment RF00162 from RFAM (pre-stored as a Github Gist)","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"data = GitHub.gist(\"b63e87024fac287a1800b1555276a04b\")\nurl = data.files[\"RF00162-trimmed.afa\"][\"raw_url\"]\npath = download(url; timeout = Inf)\nnothing #hide","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"Parse lines","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"seqs = String[]\nfor line in eachline(path)\n    if startswith(line, '>')\n        continue\n    else\n        push!(seqs, line)\n    end\nend","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"RNA nucleotides","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"NTs = \"ACGU-\";\nnothing #hide","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"One-hot representation","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"function onehot(s::String)\n    return reshape(collect(s), 1, length(s)) .== collect(NTs)\nend\nX = reshape(reduce(hcat, onehot.(seqs)), 5, :, length(seqs));\nnothing #hide","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"Sequence logo","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"xlog2x(x) = xlogx(x) / log(oftype(x,2))\nlogo_from_matrix(w::AbstractMatrix) = SequenceLogos.logo_from_matrix(w, replace(NTs, '-' => '⊟'))\n\n\nfunction seqlogo_entropic(p::AbstractMatrix; max_ylim=true)\n    @assert size(p, 1) == 5 # nucleotides + gap\n    w = p ./ sum(p; dims=1)\n    H = sum(-xlog2x.(w); dims=1)\n    @assert all(0 .≤ H .≤ log2(5))\n    SequenceLogos.plot_sequence_logo(logo_from_matrix(w .* (log2(5) .- H)), SequenceLogos.nt_color)\n    max_ylim && PyPlot.matplotlib.pyplot.ylim((0, log2(5)))\n    PyPlot.matplotlib.pyplot.ylabel(\"conservation (bits)\")\n    PyPlot.matplotlib.pyplot.xlabel(\"site\")\n    return nothing\nend","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"Plot!","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"PyPlot.matplotlib.pyplot.figure(figsize=(15,2))\nseqlogo_entropic(reshape(mean(X; dims=3), 5, 108))\nPyPlot.matplotlib.pyplot.show()","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"","category":"page"},{"location":"literate/rfam/","page":"RFAM","title":"RFAM","text":"This page was generated using Literate.jl.","category":"page"}]
}
